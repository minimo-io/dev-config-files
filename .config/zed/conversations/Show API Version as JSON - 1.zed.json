{"id":"362e93ec-d1ad-4757-a476-eb254f5be8a4","zed":"context","version":"0.4.0","text":"\n\n\n\n```ts viiv-gateway-api/src/app.module.ts:1-55\n// Excerpt from: \n/**\n * @file app.module.ts\n * @description Main application module that imports other modules, defines global configuration,\n * registers Prometheus metrics middleware, and sets up a simple root endpoint to display API version.\n */\n\nimport { Module, MiddlewareConsumer, Controller, Get } from '@nestjs/common';\nimport * as packageInfo from '../package.json'; // Adjust the path as needed\n\n// import { DatabaseModule } from './database/database.module';\nimport { ConfigModule } from '@nestjs/config';\n// import { CountriesModule } from './countries/countries.module';\n\nimport { PrometheusModule } from '@willsoto/nestjs-prometheus';\nimport { MetricsMiddleware } from './metrics.middleware';\n// import { PayinController } from './payin/payin.controller';\nimport { PayinModule } from './payin/payin.module';\n\n/**\n *   Inline AppController is defined inline within the AppModule to provide a simple endpoint at the root URL (/).\n *   It retrieves and exposes the current API version configured in the environment or configuration file.\n */\n@Controller()\nclass AppController {\n  @Get()\n  getHello(): string {\n    return `Hello! API version: ${packageInfo.version}`;\n  }\n}\n\n/**\n * Main app module\n */\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    PrometheusModule.register({\n      path: '/metrics', // Prometheus will scrape metrics from this endpoint\n      defaultMetrics: {\n        enabled: false,\n      },\n    }),\n    PayinModule,\n    // DatabaseModule,\n    // CountriesModule,\n  ],\n  controllers: [AppController],\n  providers: [],\n})\nexport class AppModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(MetricsMiddleware).forRoutes('*');\n  }\n}\n\n```\nGreat i am now showing my api version, but i want a json format\nTo return the API version in JSON format instead of plain text, you can modify your `AppController` as follows:\n\n```typescript\nimport { Controller, Get, RawBody } from '@nestjs/common';\n\n@Controller()\nclass AppController {\n  @Get()\n  getHello(@RawBody() rawBody: string): any {\n    const apiVersion = packageInfo.version;\n    return {\n      message: `Hello! API version: ${apiVersion}`,\n      version: apiVersion,\n    };\n  }\n}\n```\n\nThis way, when you access the root endpoint (`/`), you'll receive a JSON response like this:\n\n```json\n{\n  \"message\": \"Hello! API version: 1.0.0\",\n  \"version\": \"1.0.0\"\n}\n```\nWhy you add rawBody if we are not using it?\nYou're right, `RawBody` decorator is not necessary in this case since we're not reading or manipulating the request body. The `getHello()` method can be simplified as follows:\n\n```typescript\nimport { Controller, Get } from '@nestjs/common';\n\n@Controller()\nclass AppController {\n  @Get()\n  getHello(): any {\n    const apiVersion = packageInfo.version;\n    return {\n      message: `Hello! API version: ${apiVersion}`,\n      version: apiVersion,\n    };\n  }\n}\n```\n\nThank you for pointing that out.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":90}}},{"id":{"replica_id":0,"value":19},"start":1825,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":91}}},{"id":{"replica_id":0,"value":20},"start":2430,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":92}}},{"id":{"replica_id":0,"value":82},"start":2474,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":93}}},{"id":{"replica_id":0,"value":83},"start":2968,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":94}}}],"summary":"Show API Version as JSON","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null}]}